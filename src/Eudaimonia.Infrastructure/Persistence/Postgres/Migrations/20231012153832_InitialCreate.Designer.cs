// <auto-generated />
using System;
using Eudaimonia.Infrastructure.Persistence.Postgres;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Eudaimonia.Infrastructure.Postgres.Migrations
{
    [DbContext(typeof(PostgresDbContext))]
    [Migration("20231012153832_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Eudaimonia.Domain.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Bio")
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Authors", (string)null);
                });

            modelBuilder.Entity("Eudaimonia.Domain.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Books", (string)null);
                });

            modelBuilder.Entity("Eudaimonia.Domain.Publisher", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Bio")
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Publishers", (string)null);
                });

            modelBuilder.Entity("Eudaimonia.Domain.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uuid");

                    b.Property<byte>("Rating")
                        .HasColumnType("smallint");

                    b.Property<Guid>("ReviewerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Reviews", (string)null);
                });

            modelBuilder.Entity("Eudaimonia.Domain.Book", b =>
                {
                    b.HasOne("Eudaimonia.Domain.Author", null)
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Eudaimonia.Domain.Edition", "Edition", b1 =>
                        {
                            b1.Property<Guid>("BookId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Format")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<long>("PageCount")
                                .HasColumnType("bigint");

                            b1.Property<int>("PublicationYear")
                                .HasColumnType("integer");

                            b1.Property<Guid>("PublisherId")
                                .HasColumnType("uuid");

                            b1.HasKey("BookId");

                            b1.ToTable("Books");

                            b1.WithOwner()
                                .HasForeignKey("BookId");

                            b1.OwnsOne("Eudaimonia.Domain.Image", "FrontCover", b2 =>
                                {
                                    b2.Property<Guid>("EditionBookId")
                                        .HasColumnType("uuid");

                                    b2.Property<string>("Name")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.Property<string>("Url")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.HasKey("EditionBookId");

                                    b2.ToTable("Books");

                                    b2.WithOwner()
                                        .HasForeignKey("EditionBookId");
                                });

                            b1.Navigation("FrontCover")
                                .IsRequired();
                        });

                    b.OwnsMany("Eudaimonia.Domain.Genre", "Genres", b1 =>
                        {
                            b1.Property<string>("Name")
                                .HasColumnType("text");

                            b1.Property<Guid>("BookId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("Name");

                            b1.HasIndex("BookId");

                            b1.ToTable("Genres", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("BookId");
                        });

                    b.OwnsOne("Eudaimonia.Domain.ReviewSummary", "ReviewSummary", b1 =>
                        {
                            b1.Property<Guid>("BookId")
                                .HasColumnType("uuid");

                            b1.Property<double>("AverageRating")
                                .HasColumnType("double precision");

                            b1.Property<long>("FiveStarRatingCount")
                                .HasColumnType("bigint");

                            b1.Property<long>("FourStarRatingCount")
                                .HasColumnType("bigint");

                            b1.Property<long>("OneStarRatingCount")
                                .HasColumnType("bigint");

                            b1.Property<long>("RatingCount")
                                .HasColumnType("bigint");

                            b1.Property<long>("ReviewCount")
                                .HasColumnType("bigint");

                            b1.Property<long>("ThreeStarRatingCount")
                                .HasColumnType("bigint");

                            b1.Property<long>("TwoStarRatingCount")
                                .HasColumnType("bigint");

                            b1.HasKey("BookId");

                            b1.ToTable("Books");

                            b1.WithOwner()
                                .HasForeignKey("BookId");
                        });

                    b.Navigation("Edition")
                        .IsRequired();

                    b.Navigation("Genres");

                    b.Navigation("ReviewSummary")
                        .IsRequired();
                });

            modelBuilder.Entity("Eudaimonia.Domain.Review", b =>
                {
                    b.OwnsOne("Eudaimonia.Domain.Comment", "Comment", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("CommenterId")
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<Guid>("ReviewId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Text")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("Id");

                            b1.HasIndex("ReviewId")
                                .IsUnique();

                            b1.ToTable("Comments", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("ReviewId");
                        });

                    b.Navigation("Comment");
                });
#pragma warning restore 612, 618
        }
    }
}
