// <auto-generated />
using System;
using Eudaimonia.Infrastructure.Persistence.Commands;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Eudaimonia.Infrastructure.Persistence.Commands.Migrations
{
    [DbContext(typeof(CommandDbContext))]
    [Migration("20231101163626_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Eudaimonia.Domain.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Bio")
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Authors", (string)null);
                });

            modelBuilder.Entity("Eudaimonia.Domain.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DefaultEditionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Genres")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OriginalLanguage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OriginalTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Books", (string)null);
                });

            modelBuilder.Entity("Eudaimonia.Domain.Publisher", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Bio")
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Publishers", (string)null);
                });

            modelBuilder.Entity("Eudaimonia.Domain.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<byte>("Rating")
                        .HasColumnType("smallint");

                    b.Property<Guid>("ReviewerId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Reviews", (string)null);
                });

            modelBuilder.Entity("Eudaimonia.Domain.Book", b =>
                {
                    b.HasOne("Eudaimonia.Domain.Author", null)
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("Eudaimonia.Domain.Edition", "Editions", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("BookId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Description")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<string>("Language")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<int>("PublicationYear")
                                .HasColumnType("integer");

                            b1.Property<Guid>("PublisherId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Title")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.HasKey("Id");

                            b1.HasIndex("BookId");

                            b1.HasIndex("PublisherId");

                            b1.ToTable("Editions", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("BookId");

                            b1.HasOne("Eudaimonia.Domain.Publisher", null)
                                .WithMany()
                                .HasForeignKey("PublisherId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.OwnsOne("Eudaimonia.Domain.EditionSpecs", "Specs", b2 =>
                                {
                                    b2.Property<Guid>("EditionId")
                                        .HasColumnType("uuid");

                                    b2.Property<string>("Format")
                                        .IsRequired()
                                        .HasColumnType("text");

                                    b2.Property<int>("PageCount")
                                        .HasColumnType("integer");

                                    b2.HasKey("EditionId");

                                    b2.ToTable("Editions");

                                    b2.WithOwner()
                                        .HasForeignKey("EditionId");

                                    b2.OwnsOne("Eudaimonia.Domain.Image", "FrontCover", b3 =>
                                        {
                                            b3.Property<Guid>("EditionSpecsEditionId")
                                                .HasColumnType("uuid");

                                            b3.Property<string>("Name")
                                                .IsRequired()
                                                .HasColumnType("text");

                                            b3.Property<string>("Url")
                                                .IsRequired()
                                                .HasColumnType("text");

                                            b3.HasKey("EditionSpecsEditionId");

                                            b3.ToTable("Editions");

                                            b3.WithOwner()
                                                .HasForeignKey("EditionSpecsEditionId");
                                        });

                                    b2.Navigation("FrontCover")
                                        .IsRequired();
                                });

                            b1.Navigation("Specs")
                                .IsRequired();
                        });

                    b.Navigation("Editions");
                });
#pragma warning restore 612, 618
        }
    }
}
